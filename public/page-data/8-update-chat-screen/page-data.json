{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/8-update-chat-screen",
    "result": {"data":{"site":{"siteMetadata":{"title":"GDG Chat App Codelab | Sumith Damodaran","docsLocation":"https://github.com/sumithpdd/gdg_chat_codelab"}},"mdx":{"fields":{"id":"06636a0f-9f60-511f-8fc4-ccb88454bdaa","title":"Update Chat Screen","slug":"/8-update-chat-screen"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"contentKey\": \"chapter\",\n  \"title\": \"Update Chat Screen\",\n  \"stepNo\": 8,\n  \"metaTitle\": \"Update Chat Screen page\",\n  \"metaDescription\": \"Update Chat Screen description\",\n  \"date\": \"2022-01-25T21:27:17.316Z\",\n  \"duration\": \"30 min\",\n  \"tags\": [\"flutter\", \"firebase\"],\n  \"keywords\": [\"flutter\", \"firebase\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\uD83D\\uDDE3\\uFE0F Update Chat Screen\"), mdx(\"p\", null, \"Now let's finish the Chat application and save the chat message to database.\"), mdx(\"h4\", null, \"Database Service\"), mdx(\"p\", null, \"We update our \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DatabaseService\"), \" to getChatMessages and sendChatMessage => database_service.dart  \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Future<List<Message>> getChatMessages(\\n      String senderId, String receiverId) async {\\n    List<Message> messages = [];\\n    QuerySnapshot messagesSenderQuerySnapshot = await chatsRef\\n        .where('senderId', isEqualTo: senderId)\\n        .where('toUserId', isEqualTo: receiverId)\\n        .orderBy('timestamp', descending: true)\\n        .get();\\n\\n    for (var doc in messagesSenderQuerySnapshot.docs) {\\n      // ignore: avoid_print\\n      print(doc.id);\\n      messages.add(Message.fromDoc(doc));\\n    }\\n    QuerySnapshot messagestoQuerySnapshot = await chatsRef\\n        .where('senderId', isEqualTo: receiverId)\\n        .where('toUserId', isEqualTo: senderId)\\n        .orderBy('timestamp', descending: true)\\n        .get();\\n\\n    for (var doc in messagestoQuerySnapshot.docs) {\\n      // ignore: avoid_print\\n      print(doc.id);\\n      messages.add(Message.fromDoc(doc));\\n    }\\n\\n    Comparator<Message> timestampComparator =\\n        (a, b) => b.timestamp!.compareTo(a.timestamp!);\\n    messages.sort(timestampComparator);\\n    return messages;\\n  }\\n\\n  void sendChatMessage(Message message) {\\n    chatsRef.add({\\n      'senderId': message.senderId,\\n      'toUserId': message.toUserId,\\n      'text': message.text,\\n      'imageUrl': message.imageUrl,\\n      'isLiked': message.isLiked,\\n      'unread': message.unread,\\n      'timestamp': Timestamp.fromDate(DateTime.now()),\\n    });\\n  }\\n\")), mdx(\"h4\", null, \"Update Message Model\"), mdx(\"p\", null, \"We need to update our message model and introduce\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"final Timestamp? timestamp;\")), mdx(\"p\", null, \"also it will have a function that maps database values with object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:cloud_firestore/cloud_firestore.dart';\\n\\nclass Message {\\n  final String? id, senderId, toUserId, text, imageUrl;\\n  final bool? isLiked;\\n  final bool? unread;\\n  final Timestamp? timestamp;\\n\\n  Message({\\n    this.id,\\n    this.senderId,\\n    this.toUserId,\\n    this.text,\\n    this.imageUrl,\\n    this.isLiked,\\n    this.unread,\\n    this.timestamp,\\n  });\\n\\n  factory Message.fromDoc(DocumentSnapshot doc) {\\n    return Message(\\n        id: doc.id,\\n        senderId: doc['senderId'],\\n        toUserId: doc['toUserId'],\\n        text: doc['text'],\\n        imageUrl: doc['imageUrl'],\\n        isLiked: doc['isLiked'],\\n        unread: doc['unread'],\\n        timestamp: doc['timestamp']);\\n  }\\n}\\n\")), mdx(\"p\", null, \"We will add \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dateFormat\"), \" to our \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"constants.dart\"), \" \\uD83D\\uDCC4 file\"), mdx(\"p\", null, \"To get the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dateformat\"), \" import package - intl - pubspec.yaml\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"intl: ^0.17.0\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"final DateFormat timeFormat = DateFormat('E, h:mm a');\\n\")), mdx(\"h4\", null, \"Refactor Chat Screen\"), mdx(\"p\", null, \"That \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"chat_screen.dart\")), \" will need to take 2 parameters, from which user message is coming from and to sender.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" final String currentUserId;\\n  final AppUser toUser;\\n\\n  const ChatScreen(\\n      {required this.currentUserId, required this.toUser, Key? key})\\n      : super(key: key);\\n  @override\\n  _ChatScreenState createState() => _ChatScreenState();\\n}\\n\")), mdx(\"p\", null, \"We need to bring messages from our database. so remove   reference to dummy data \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"List<Message> _messages = [];\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"And add database service , also that needs to be initialized\"), \" , create a private function to process through the messages and initialize the message list\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"List<Message> _messages = [];\\n  late DatabaseService _databaseService;\\n @override\\n  void initState() {\\n    super.initState();\\n    _databaseService = Provider.of<DatabaseService>(context, listen: false);\\n\\n    _setupMessages();\\n  }\\n\\n  _setupMessages() async {\\n    List<Message> messages = await _databaseService.getChatMessages(\\n        widget.currentUserId, widget.toUser.id!);\\n    setState(() {\\n      _messages = messages;\\n    });\\n  }\\n\")), mdx(\"p\", null, \"Update message time in the text with\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Text(\\n    timeFormat.format(message.timestamp!.toDate()),\\n\")), mdx(\"p\", null, \"In the \\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"void _handleSubmitted(String\"), \" , update code to pass new values and call the database service\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  void _handleSubmitted(String text) {\\n    _textMessageController.clear();\\n\\n    setState(() {\\n      _isComposing = false;\\n    });\\n\\n    Message message = Message(\\n      senderId: widget.currentUserId,\\n      toUserId: widget.toUserId,\\n      timestamp: Timestamp.fromDate(DateTime.now()),\\n      text: text,\\n      isLiked: true,\\n      unread: true,\\n    );\\n\\n    setState(() {\\n      _messages.insert(0, message);\\n    });\\n     _databaseService.sendChatMessage(message);\\n  }\\n\")), mdx(\"p\", null, \"And finally update the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isMe\"), \"code to get value from the widget\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"final bool isMe = message.senderId == widget.currentUserId;\\n\")), mdx(\"p\", null, \"Chat screen is called through the attendees screen.\"), mdx(\"h4\", null, \"Update all_attendees_widget\"), mdx(\"p\", null, \"So update the all_attendees_widget.dart\"), mdx(\"p\", null, \"Note : In the build get the current user id\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  Widget build(BuildContext context) {\\n    String? currentUserId =\\n        Provider.of<UserData>(context, listen: false).currentUserId;\\n\")), mdx(\"p\", null, \"And pass it to the chatscreen , update GestureDetector\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"return GestureDetector(\\n                onTap: () => Navigator.push(\\n                  context,\\n                  MaterialPageRoute(\\n                    builder: (_) => ChatScreen(\\n                        currentUserId: currentUserId!,\\n                        toUser: user,\\n                        ),\\n                  ),\\n                ),\\n\")), mdx(\"p\", null, \"You may receive an indexing error, go to console and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"click on the link to rebuild index\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Error: \"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"FirebaseException (\", \"[\", \"cloud_firestore/failed-precondition] The query requires an index. You can create it here: ..\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://res.cloudinary.com/sitecore/image/upload/c_limit,q_80,w_2000/v1643294195/Codelab/flutter_07_indexing_error_rzwqpm.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://res.cloudinary.com/sitecore/image/upload/c_limit,q_80,w_2000/v1643295886/Codelab/flutter_08_bidirectional_chat_syta1q.png\",\n    \"alt\": null\n  })), mdx(\"h2\", null, \"Sending Picture Messages\"), mdx(\"p\", null, \"We would also like to send pictures in the chat.\"), mdx(\"p\", null, \"In our \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"storage_service.dart\"), \" we will add/check function \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"uploadMessageImage\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Future<String> uploadMessageImage(File imageFile) async {\\n    String imageId = const Uuid().v4();\\n    File? image = await _compressImage(imageId, imageFile);\\n    String downloadUrl = await _uploadImage(\\n      'images/messages/message_$imageId.jpg',\\n      image!,\\n    );\\n    return downloadUrl;\\n  }\\n\")), mdx(\"p\", null, \"In chat_screen.dart we update _buildMessage\"), mdx(\"p\", null, \"And check if message.imageurl == null and remove\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Text(message.text!,\")), mdx(\"p\", null, \"\\u2026 and refactor into its own functions\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" children: <Widget>[\\n            message.imageUrl == null\\n                ? _buildText(isMe, message)\\n                : _buildImage(context, message),\\n            const SizedBox(height: 8.0),\\n\")), mdx(\"p\", null, \"Add the new methods before build\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"_buildText(bool isMe, Message message) {\\n    return Text(\\n      message.text!,\\n      style: TextStyle(\\n        color: isMe\\n            ? AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR_BLACK)\\n            : AppConstants.hexToColor(AppConstants.APP_BACKGROUND_COLOR_GRAY),\\n        fontSize: 15.0,\\n        fontWeight: FontWeight.w600,\\n      ),\\n    );\\n  }\\n\\n  _buildImage(BuildContext context, Message message) {\\n    final size = MediaQuery.of(context).size;\\n    return Container(\\n      height: size.height * 0.2,\\n      width: size.width * 0.6,\\n      decoration: BoxDecoration(\\n          borderRadius: BorderRadius.circular(20.0),\\n          image: DecorationImage(\\n            fit: BoxFit.cover,\\n            image: CachedNetworkImageProvider(message.imageUrl!),\\n          )),\\n    );\\n  }\\n\")), mdx(\"p\", null, \"Add to onPressed of our camera icon _buildMessageComposer()\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"RawMaterialButton(\\n            onPressed: () async {\\n              XFile? imageFile = await ImagePicker().pickImage(\\n                source: ImageSource.gallery,\\n              );\\n              if (imageFile != null) {\\n                String imageUrl =\\n                    await Provider.of<StorageService>(context, listen: false)\\n                        .uploadMessageImage(File(imageFile.path));\\n                _handleSubmitted(null, imageUrl);\\n              }\\n            },\\n            child: Icon(\\n              Icons.camera_alt,\\n\")), mdx(\"p\", null, \"Update \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"_handleSubmitted\"), \" to take additional parameter\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"void _handleSubmitted(String? text, String? imageUrl) {\\n    if ((text != null && text.trim().isNotEmpty) || imageUrl != null) {\\n      if (imageUrl == null) {\\n        //text message\\n\\n        setState(() {\\n          _isComposing = false;\\n        });\\n      }\\n      Message message = Message(\\n        senderId: widget.currentUserId,\\n        toUserId: widget.toUser.id,\\n        imageUrl: imageUrl,\\n        timestamp: Timestamp.fromDate(DateTime.now()),\\n        text: text,\\n        isLiked: true,\\n        unread: true,\\n      );\\n      setState(() {\\n        _messages.insert(0, message);\\n      });\\n      _databaseService.sendChatMessage(message);\\n    }\\n  }\\n\")), mdx(\"p\", null, \"\\xA0And update its usages.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"   onPressed: _isComposing\\n                ? () => _handleSubmitted(_textMessageController.text, null)\\n                : null,\\n\")), mdx(\"p\", null, \"Finally add Provider for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StorageService\"), \" in main.dart\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" Provider<StorageService>(\\n          create: (_) => StorageService(),\\n        ),\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://res.cloudinary.com/sitecore/image/upload/c_limit,q_80,w_2000/v1643317783/Codelab/flutter_06_awxxgd.png\",\n    \"alt\": null\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#️-update-chat-screen","title":"🗣️ Update Chat Screen","items":[{"items":[{"items":[{"url":"#database-service","title":"Database Service"},{"url":"#update-message-model","title":"Update Message Model"},{"url":"#refactor-chat-screen","title":"Refactor Chat Screen"},{"url":"#update-all_attendees_widget","title":"Update all_attendees_widget"}]}]},{"url":"#sending-picture-messages","title":"Sending Picture Messages"}]}]},"parent":{"relativePath":"8-update-chat-screen.mdx"},"frontmatter":{"metaTitle":"Update Chat Screen page","metaDescription":"Update Chat Screen description"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Flutter Chat App Codelab"}}},{"node":{"fields":{"slug":"/1-introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/2-project-structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/3-step-up-firebase-for-chat-app","title":"Step up - Firebase for chat app"}}},{"node":{"fields":{"slug":"/4-homescreenandlogin","title":"Home Screen and Login"}}},{"node":{"fields":{"slug":"/5-chat-screen","title":"Chat Screen"}}},{"node":{"fields":{"slug":"/6-attendees-screen","title":"Attendees Screen"}}},{"node":{"fields":{"slug":"/7-firebase-storage-profile","title":"Firebase Storage - Profile"}}},{"node":{"fields":{"slug":"/8-update-chat-screen","title":"Update Chat Screen"}}},{"node":{"fields":{"slug":"/9-1-one-more-thing","title":"One more thing"}}},{"node":{"fields":{"slug":"/9-2-appendix","title":"Appendix"}}}]}},"pageContext":{"id":"06636a0f-9f60-511f-8fc4-ccb88454bdaa"}},
    "staticQueryHashes": ["2375958266","3940619206","417421954"]}