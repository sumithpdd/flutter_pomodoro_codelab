{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/7-firebase-storage-profile",
    "result": {"data":{"site":{"siteMetadata":{"title":"GDG Chat App Codelab | Sumith Damodaran","docsLocation":"https://github.com/sumithpdd/gdg_chat_codelab"}},"mdx":{"fields":{"id":"55528a7b-6149-5a8f-8105-7e782e42fa2d","title":"Firebase Storage - Profile","slug":"/7-firebase-storage-profile"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"contentKey\": \"chapter\",\n  \"title\": \"Firebase Storage - Profile\",\n  \"stepNo\": 7,\n  \"metaTitle\": \"Firebase Storage page\",\n  \"metaDescription\": \"Firebase Storage description\",\n  \"date\": \"2022-01-25T21:20:25.138Z\",\n  \"duration\": \"30 min\",\n  \"tags\": [\"flutter\", \"firebase\"],\n  \"keywords\": [\"flutter\", \"firebase\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\uD83E\\uDD33 Firebase Storage - Profile\"), mdx(\"p\", null, \"Here we will look at firebase storage, we have images for the attendees \\uD83D\\uDCC7 profile Images we can store in firebase storage. For that we will create a Edit profile screen\"), mdx(\"h2\", null, \"Image Upload\"), mdx(\"p\", null, \"Create a new \\uD83D\\uDCC4 file \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"storage_service.dart\")), \" under \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"services\")), \" \\uD83D\\uDCC1 folder\\nInstall a package flutter_image_compress , update pubspec.yaml \\uD83D\\uDCC4 file so that we compress images during storage.\"), mdx(\"p\", null, \" flutter_image_compress: ^1.1.0\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'dart:io';\\n\\nimport 'package:firebase_storage/firebase_storage.dart';\\nimport 'package:flutter_image_compress/flutter_image_compress.dart';\\nimport 'package:devfest_flutter_firebase_chat/helpers/constants.dart';\\nimport 'package:path_provider/path_provider.dart';\\nimport 'package:uuid/uuid.dart';\\n\\nclass StorageService {\\n  static Future<String> uploadUserProfileImage(\\n      String url, File imageFile) async {\\n    String? photoId = const Uuid().v4();\\n    File? image = await _compressImage(photoId, imageFile);\\n\\n    if (url.isNotEmpty) {\\n      // Updating user profile image\\n      RegExp exp = RegExp(r'userProfile_(.*).jpg');\\n      photoId = exp.firstMatch(url)![1];\\n    }\\n\\n    String downloadUrl = await _uploadImage(\\n      'images/users/userProfile_$photoId.jpg',\\n      image!,\\n    );\\n    return downloadUrl;\\n  }\\n\\n  static Future<File?> _compressImage(String imageId, File image) async {\\n    final tempDir = await getTemporaryDirectory();\\n    final path = tempDir.path;\\n    File? compressedImageFile = await FlutterImageCompress.compressAndGetFile(\\n      image.path,\\n      '$path/img_$imageId.jpg',\\n      quality: 70,\\n    );\\n    return compressedImageFile;\\n  }\\n\\n  static Future<String> _uploadImage(String path, File image) async {\\n    UploadTask uploadTask = storageRef.child(path).putFile(image);\\n    TaskSnapshot storageSnap = await uploadTask;\\n    String downloadUrl = await storageSnap.ref.getDownloadURL();\\n    return downloadUrl;\\n  }\\n\\n  Future<String> uploadChatImage(String? url, File? imageFile) async {\\n    String? imageId = const Uuid().v4();\\n    File? image = await _compressImage(imageId, imageFile!);\\n\\n    if (url != null) {\\n      RegExp exp = RegExp(r'chat_(.*).jpg');\\n      imageId = exp.firstMatch(url)![1];\\n    }\\n    String downloadUrl = await _uploadImage(\\n      'images/chats/chat_$imageId.jpg',\\n      image!,\\n    );\\n    return downloadUrl;\\n  }\\n\\n  Future<String> uploadMessageImage(File imageFile) async {\\n    String imageId = const Uuid().v4();\\n    File? image = await _compressImage(imageId, imageFile);\\n    String downloadUrl = await _uploadImage(\\n      'images/messages/message_$imageId.jpg',\\n      image!,\\n    );\\n    return downloadUrl;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Also update database service to add a function to update user \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"database_service.dart\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" static void updateUser(AppUser user) {\\n    usersRef.doc(user.id).update({\\n      'name': user.name,\\n      'profileImageUrl': user.profileImageUrl,\\n      'bio': user.bio,\\n    });\\n  }\\n\")), mdx(\"p\", null, \"Now backend is ready, lets work on the screen create a new file \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"edit_profile_screen.dart\")), \" under screens folder,\"), mdx(\"h3\", null, \"EditProfile Screen\"), mdx(\"p\", null, \"Create a new \\uD83D\\uDCC4 file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edit_profile_screen.dart\"), \" under \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"screens\")), \" \\uD83D\\uDCC1 folder.\\nwe need a image picker, install a new package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"image_picker: ^0.8.4+5\")), mdx(\"p\", null, \"add this code to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"edit_profile_screen.dart\")), \" file\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'dart:io';\\n\\nimport 'package:devfest_flutter_firebase_chat/widgets/user_profile_image.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:devfest_flutter_firebase_chat/helpers/app_constants.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/app_user.dart';\\nimport 'package:devfest_flutter_firebase_chat/services/storage_service.dart';\\nimport 'package:devfest_flutter_firebase_chat/services/database_service.dart';\\nimport 'package:image_picker/image_picker.dart';\\n\\nclass EditProfileScreen extends StatefulWidget {\\n  static const String id = 'edit_profile_screen';\\n\\n  final AppUser user;\\n  const EditProfileScreen({required this.user, Key? key}) : super(key: key);\\n  @override\\n  _EditProfileScreenState createState() => _EditProfileScreenState();\\n}\\n\\nclass _EditProfileScreenState extends State<EditProfileScreen> {\\n  final _formKey = GlobalKey<FormState>();\\n  File? _profileImage;\\n  String _name = '';\\n  String _bio = '';\\n  bool _isLoading = false;\\n  @override\\n  void initState() {\\n    super.initState();\\n    _name = widget.user.name!;\\n    _bio = widget.user.bio!;\\n  }\\n\\n  _handleImageFromGallery() async {\\n    XFile? imageFile =\\n        await ImagePicker().pickImage(source: ImageSource.gallery);\\n    if (imageFile != null) {\\n      setState(() {\\n        _profileImage = File(imageFile.path);\\n      });\\n    }\\n  }\\n\\n  _displayProfileImage() {\\n    if (_profileImage == null) {\\n      // User profile image exists\\n      return profileImage(widget.user);\\n    } else {\\n      // New profile image\\n      return CircleAvatar(\\n        radius: 60.0,\\n        backgroundColor:\\n            AppConstants.hexToColor(AppConstants.APP_BACKGROUND_COLOR_GRAY),\\n        backgroundImage: FileImage(_profileImage!),\\n      );\\n    }\\n  }\\n\\n  _submit() async {\\n    if (_formKey.currentState!.validate() && !_isLoading) {\\n      _formKey.currentState!.save();\\n\\n      setState(() {\\n        _isLoading = true;\\n      });\\n\\n      // Update user in database\\n      String? _profileImageUrl = '';\\n\\n      if (_profileImage == null) {\\n        _profileImageUrl = widget.user.profileImageUrl;\\n      } else {\\n        _profileImageUrl = await StorageService.uploadUserProfileImage(\\n          widget.user.profileImageUrl!,\\n          _profileImage!,\\n        );\\n      }\\n\\n      AppUser user = AppUser(\\n        id: widget.user.id,\\n        name: _name,\\n        profileImageUrl: _profileImageUrl,\\n        bio: _bio,\\n      );\\n      // Database update\\n      DatabaseService.updateUser(user);\\n\\n      Navigator.pop(context);\\n    }\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        backgroundColor:\\n            AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR),\\n        title: const Text(\\n          'Edit Profile',\\n          style: TextStyle(\\n            fontSize: 28.0,\\n            fontWeight: FontWeight.bold,\\n          ),\\n        ),\\n      ),\\n      body: GestureDetector(\\n        onTap: () => FocusScope.of(context).unfocus(),\\n        child: ListView(\\n          children: <Widget>[\\n            _isLoading\\n                ? LinearProgressIndicator(\\n                    backgroundColor:\\n                        AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR),\\n                    valueColor: AlwaysStoppedAnimation(AppConstants.hexToColor(\\n                        AppConstants.APP_PRIMARY_COLOR)),\\n                  )\\n                : const SizedBox.shrink(),\\n            Padding(\\n              padding: const EdgeInsets.all(30.0),\\n              child: Form(\\n                key: _formKey,\\n                child: Column(\\n                  children: <Widget>[\\n                    _displayProfileImage(),\\n                    TextButton(\\n                      onPressed: _handleImageFromGallery,\\n                      child: Text(\\n                        'Change Profile Image',\\n                        style: TextStyle(\\n                            color: AppConstants.hexToColor(\\n                                AppConstants.APP_PRIMARY_COLOR_ACTION),\\n                            fontSize: 16.0),\\n                      ),\\n                    ),\\n                    TextFormField(\\n                      initialValue: _name,\\n                      style: const TextStyle(fontSize: 18.0),\\n                      decoration: const InputDecoration(\\n                        icon: Icon(\\n                          Icons.person,\\n                          size: 30.0,\\n                        ),\\n                        labelText: 'Name',\\n                      ),\\n                      validator: (input) => input!.trim().isEmpty\\n                          ? 'Please enter a valid name'\\n                          : null,\\n                      onSaved: (input) => _name = input!,\\n                    ),\\n                    TextFormField(\\n                      initialValue: _bio,\\n                      style: const TextStyle(fontSize: 18.0),\\n                      decoration: const InputDecoration(\\n                        icon: Icon(\\n                          Icons.book,\\n                          size: 30.0,\\n                        ),\\n                        labelText: 'Bio',\\n                      ),\\n                      validator: (input) => input!.trim().length > 150\\n                          ? 'Please enter a bio less than 150 characters'\\n                          : null,\\n                      onSaved: (input) => _bio = input!,\\n                    ),\\n                    Container(\\n                      margin: const EdgeInsets.all(40.0),\\n                      height: 40.0,\\n                      width: 250.0,\\n                      child: FlatButton(\\n                        onPressed: _submit,\\n                        color: AppConstants.hexToColor(\\n                            AppConstants.APP_PRIMARY_COLOR),\\n                        textColor: AppConstants.hexToColor(\\n                            AppConstants.APP_PRIMARY_FONT_COLOR_WHITE),\\n                        child: const Text(\\n                          'Save Profile',\\n                          style: TextStyle(fontSize: 18.0),\\n                        ),\\n                      ),\\n                    ),\\n                  ],\\n                ),\\n              ),\\n            ),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\")), mdx(\"p\", null, \"to navigate to this screen modify \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"onpressed\"), \" for the Edit Profile icon button in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"app_drawer_widget.dart\"), \" , fix the imports\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"   onPressed: () => Navigator.push(\\n                    context,\\n                    MaterialPageRoute(\\n                      builder: (_) => EditProfileScreen(\\n                        user: user,\\n                      ),\\n                    ),\\n                  ),\\n                  color:\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Update commented ``profileImage(user, avatarRadius: 20),``attendees_screen.dart\"))), mdx(\"h3\", null, \"Information and FYI\"), mdx(\"p\", null, \"We used few new packages in the new code make sure they exist , or add them to pubspec.yaml and run pub get\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flutter_image_compress: ^0.6.5+1\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path_provider: ^1.6.5\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"uuid: ^2.0.4\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"image_picker: ^0.6.3+4\"), \"  \")), mdx(\"p\", null, \"Image picker for IOS needs some special setting \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pub.dev/packages/image_picker\"\n  }, \"https://pub.dev/packages/image_picker\")), mdx(\"p\", null, \"NSPhotoLibraryUsageDescription\"), mdx(\"p\", null, \"NSCameraUsageDescription\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://lh3.googleusercontent.com/9kDtm6HcavLnPd5RihgkRFRMndhgj7Oj5M57c8WhbMKjwojImWtPt0sSMwOT7jUk1yZTUTSberacCTiJhtoNF169reNlEJq9veGChNky0POXm_wTbH6jMYBMaezIQBhXAYtob0o2\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"if you get an error\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"MissingPluginException (MissingPluginException(No implementation found for method pickImage on channel plugins.flutter.io/image_picker))\")), mdx(\"p\", null, \"run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flutter clean\"), \" and\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restart the app\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://res.cloudinary.com/sitecore/image/upload/c_limit,q_80,w_2000/v1643275707/Codelab/flutter_06_edit_profile_imagepicker_icu5nc.png\",\n    \"alt\": \"Edit profile Image Picker\",\n    \"title\": \"Edit profile Image Picker\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#-firebase-storage---profile","title":"🤳 Firebase Storage - Profile","items":[{"url":"#image-upload","title":"Image Upload","items":[{"url":"#editprofile-screen","title":"EditProfile Screen"},{"url":"#information-and-fyi","title":"Information and FYI"}]}]}]},"parent":{"relativePath":"7-firebase-storage-profile.mdx"},"frontmatter":{"metaTitle":"Firebase Storage page","metaDescription":"Firebase Storage description"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Flutter Chat App Codelab"}}},{"node":{"fields":{"slug":"/1-introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/2-project-structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/3-step-up-firebase-for-chat-app","title":"Step up - Firebase for chat app"}}},{"node":{"fields":{"slug":"/4-homescreenandlogin","title":"Home Screen and Login"}}},{"node":{"fields":{"slug":"/5-chat-screen","title":"Chat Screen"}}},{"node":{"fields":{"slug":"/6-attendees-screen","title":"Attendees Screen"}}},{"node":{"fields":{"slug":"/7-firebase-storage-profile","title":"Firebase Storage - Profile"}}},{"node":{"fields":{"slug":"/8-update-chat-screen","title":"Update Chat Screen"}}},{"node":{"fields":{"slug":"/9-1-one-more-thing","title":"One more thing"}}},{"node":{"fields":{"slug":"/9-2-appendix","title":"Appendix"}}}]}},"pageContext":{"id":"55528a7b-6149-5a8f-8105-7e782e42fa2d"}},
    "staticQueryHashes": ["2375958266","3940619206","417421954"]}