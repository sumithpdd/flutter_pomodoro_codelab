{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/5-chat-screen",
    "result": {"data":{"site":{"siteMetadata":{"title":"GDG Chat App Codelab | Sumith Damodaran","docsLocation":"https://github.com/sumithpdd/gdg_chat_codelab"}},"mdx":{"fields":{"id":"4dbc52f4-7f9f-5cdd-b177-e6009d598852","title":"Chat Screen","slug":"/5-chat-screen"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"contentKey\": \"chapter\",\n  \"title\": \"Chat Screen\",\n  \"stepNo\": 5,\n  \"metaTitle\": \"Chat Screen page\",\n  \"metaDescription\": \"Chat Screen description\",\n  \"date\": \"2022-01-26T17:46:15.135Z\",\n  \"duration\": \"30 min\",\n  \"tags\": [\"flutter\", \"firebase\", \"chatapp\"],\n  \"keywords\": [\"flutter\", \"firebase\", \"chatapp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\uD83E\\uDDD1\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1 Chat Screen\"), mdx(\"p\", null, \"Lets start building the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"chat screen\")), mdx(\"p\", null, \"for chat we need messages, we will create a model for messages , Create a new \\uD83D\\uDCC4 file under models \\uD83D\\uDCC1 folder  => \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"message.dart\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:cloud_firestore/cloud_firestore.dart';\\n\\nclass Message {\\n  final String? id, senderId, toUserId, text, imageUrl;\\n  final bool? isLiked;\\n  final bool? unread;\\n  final String? timestamp;\\n\\n  Message({\\n    this.id,\\n    this.senderId,\\n    this.toUserId,\\n    this.text,\\n    this.imageUrl,\\n    this.isLiked,\\n    this.unread,\\n    this.timestamp,\\n  });\\n\\n  factory Message.fromDoc(DocumentSnapshot doc) {\\n    return Message(\\n        id: doc.id,\\n        senderId: doc['senderId'],\\n        toUserId: doc['toUserId'],\\n        text: doc['text'],\\n        imageUrl: doc['imageUrl'],\\n        isLiked: doc['isLiked'],\\n        unread: doc['unread'],\\n        timestamp: doc['timestamp']);\\n  }\\n}\\n\")), mdx(\"p\", null, \"We will create some dummy data to work with , update \\uD83D\\uDCC4 file data.dart under data \\uD83D\\uDCC1 folder , we will create some dummy users and messages\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:devfest_flutter_firebase_chat/models/app_user.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/message.dart';\\n\\n// YOU - current AppUser\\nfinal AppUser currentAppUser = AppUser(\\n  id: '0',\\n  name: 'Current AppUser',\\n  profileImageUrl: 'assets/images/greg.jpg',\\n);\\n\\n// AppUserS\\nfinal AppUser sumith = AppUser(\\n  id: '1',\\n  name: 'Sumith',\\n  profileImageUrl: 'assets/images/user_placeholder.jpg',\\n);\\nfinal AppUser martin = AppUser(\\n  id: '2',\\n  name: 'martin',\\n  profileImageUrl: 'assets/images/user_placeholder.jpg',\\n);\\nfinal AppUser laura = AppUser(\\n  id: '3',\\n  name: 'laura',\\n  profileImageUrl: 'assets/images/user_placeholder.jpg',\\n);\\nfinal AppUser bilal = AppUser(\\n  id: '4',\\n  name: 'bilal',\\n  profileImageUrl: 'assets/images/user_placeholder.jpg',\\n);\\nfinal AppUser sam = AppUser(\\n  id: '5',\\n  name: 'Sam',\\n  profileImageUrl: 'assets/images/user_placeholder.jpg',\\n);\\nfinal AppUser sophia = AppUser(\\n  id: '6',\\n  name: 'Sophia',\\n  profileImageUrl: 'assets/images/user_placeholder.jpg',\\n);\\nfinal AppUser steven = AppUser(\\n  id: '7',\\n  name: 'Steven',\\n  profileImageUrl: 'assets/images/user_placeholder.jpg',\\n);\\n\\n// EXAMPLE CHATS ON HOME SCREEN\\nList<Message> chats = [\\n  Message(\\n    senderId: 'sumith',\\n    timestamp: '5:30 PM',\\n    text: 'Hey, how\\\\'s it going? What did you do today?',\\n    isLiked: false,\\n    unread: true,\\n  ),\\n  Message(\\n    senderId: 'laura',\\n    timestamp: '4:30 PM',\\n    text: 'Hey, how\\\\'s it going? What did you do today?',\\n    isLiked: false,\\n    unread: true,\\n  ),\\n  Message(\\n    senderId: 'martin',\\n    timestamp: '3:30 PM',\\n    text: 'Hey, how\\\\'s it going? What did you do today?',\\n    isLiked: false,\\n    unread: false,\\n  ),\\n  Message(\\n    senderId: 'sophia',\\n    timestamp: '2:30 PM',\\n    text: 'Hey, how\\\\'s it going? What did you do today?',\\n    isLiked: false,\\n    unread: true,\\n  ),\\n  Message(\\n    senderId: 'bilal',\\n    timestamp: '1:30 PM',\\n    text: 'Hey, how\\\\'s it going? What did you do today?',\\n    isLiked: false,\\n    unread: false,\\n  ),\\n  Message(\\n    senderId: 'sam',\\n    timestamp: '12:30 PM',\\n    text: 'Hey, how\\\\'s it going? What did you do today?',\\n    isLiked: false,\\n    unread: false,\\n  ),\\n  Message(\\n    senderId: 'bilal',\\n    timestamp: '11:30 AM',\\n    text: 'Hey, how\\\\'s it going? What did you do today?',\\n    isLiked: false,\\n    unread: false,\\n  ),\\n];\\n\\n// EXAMPLE MESSAGES IN CHAT SCREEN\\nList<Message> messages = [\\n  Message(\\n    senderId: 'martin',\\n    timestamp: '5:30 PM',\\n    text: 'Hey, how\\\\'s it going? What did you do today?',\\n    isLiked: true,\\n    unread: true,\\n  ),\\n  Message(\\n    senderId: currentAppUser.id,\\n    timestamp: '4:30 PM',\\n    text: 'Just walked my dog. She was super duper cute. The best puppy!!',\\n    isLiked: false,\\n    unread: true,\\n  ),\\n  Message(\\n    senderId: 'martin',\\n    timestamp: '3:45 PM',\\n    text: 'How\\\\'s the doggie?',\\n    isLiked: false,\\n    unread: true,\\n  ),\\n  Message(\\n    senderId: 'martin',\\n    timestamp: '3:15 PM',\\n    text: 'All the food',\\n    isLiked: true,\\n    unread: true,\\n  ),\\n  Message(\\n    senderId: currentAppUser.id,\\n    timestamp: '2:30 PM',\\n    text: 'Nice! What kind of food did you eat?',\\n    isLiked: false,\\n    unread: true,\\n  ),\\n  Message(\\n    senderId: 'martin',\\n    timestamp: '2:00 PM',\\n    text: 'I ate so much food today.',\\n    isLiked: false,\\n    unread: true,\\n  ),\\n];\\n\")), mdx(\"p\", null, \"Now we start with our chat screen\"), mdx(\"p\", null, \"Create a new \\uD83D\\uDCC4 file under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screens\"), \" \\uD83D\\uDCC1 folder  => \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"chat_screen.dart\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// ignore_for_file: prefer_const_constructors\\n\\nimport 'package:devfest_flutter_firebase_chat/data/data.dart';\\nimport 'package:devfest_flutter_firebase_chat/helpers/app_constants.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/message.dart';\\nimport 'package:flutter/material.dart';\\n\\nclass ChatScreen extends StatefulWidget {\\n  const ChatScreen({Key? key}) : super(key: key);\\n\\n  @override\\n  _ChatScreenState createState() => _ChatScreenState();\\n}\\n\\nclass _ChatScreenState extends State<ChatScreen> {\\n  final TextEditingController _textMessageController = TextEditingController();\\n  bool _isComposing = false;\\n\\n  final List<Message> _messages = messages;\\n\\n  _buildMessage(Message message, bool isMe) {\\n    final Widget msg = Padding(\\n      padding: const EdgeInsets.all(8.0),\\n      child: Container(\\n        margin: isMe\\n            ? const EdgeInsets.only(\\n                top: 8.0,\\n                bottom: 8.0,\\n                left: 80.0,\\n              )\\n            : const EdgeInsets.only(\\n                top: 8.0,\\n                bottom: 8.0,\\n              ),\\n        padding: const EdgeInsets.symmetric(horizontal: 25.0, vertical: 15.0),\\n        width: MediaQuery.of(context).size.width * 0.75,\\n        decoration: BoxDecoration(\\n          color: isMe\\n              ? AppConstants.hexToColor(AppConstants.APP_PRIMARY_TILE_COLOR)\\n              : AppConstants.hexToColor(\\n                  AppConstants.APP_BACKGROUND_COLOR_WHITE),\\n          borderRadius: isMe\\n              ? const BorderRadius.only(\\n                  topLeft: Radius.circular(15.0),\\n                  topRight: Radius.circular(15.0),\\n                  bottomLeft: Radius.circular(15.0),\\n                )\\n              : const BorderRadius.only(\\n                  topLeft: Radius.circular(15.0),\\n                  topRight: Radius.circular(15.0),\\n                  bottomRight: Radius.circular(15.0),\\n                ),\\n        ),\\n        child: Column(\\n          crossAxisAlignment: CrossAxisAlignment.start,\\n          children: <Widget>[\\n            Text(\\n              message.text!,\\n              style: TextStyle(\\n                color: isMe ? Colors.white60 : Colors.blueGrey,\\n                fontSize: 12.0,\\n                fontWeight: FontWeight.w600,\\n              ),\\n            ),\\n            SizedBox(height: 8.0),\\n            Row(\\n              mainAxisAlignment:\\n                  isMe ? MainAxisAlignment.end : MainAxisAlignment.start,\\n              children: <Widget>[\\n                Text(\\n                  message.timestamp!,\\n                  style: TextStyle(\\n                    color: isMe\\n                        ? AppConstants.hexToColor(\\n                            AppConstants.APP_PRIMARY_COLOR_GREEN)\\n                        : AppConstants.hexToColor(\\n                            AppConstants.APP_BACKGROUND_COLOR_GRAY),\\n                    fontSize: 12.0,\\n                    fontWeight: FontWeight.w800,\\n                  ),\\n                ),\\n              ],\\n            ),\\n          ],\\n        ),\\n      ),\\n    );\\n\\n    return Row(\\n      children: <Widget>[msg],\\n    );\\n  }\\n\\n  _buildMessageComposer() {\\n    return Container(\\n      padding: const EdgeInsets.symmetric(horizontal: 8.0),\\n      height: 70.0,\\n      color: AppConstants.hexToColor(AppConstants.APP_BACKGROUND_COLOR_WHITE),\\n      child: Row(\\n        children: <Widget>[\\n          RawMaterialButton(\\n            onPressed: () {},\\n            child: Icon(\\n              Icons.camera_alt,\\n              color: AppConstants.hexToColor(\\n                  AppConstants.APP_BACKGROUND_COLOR_GRAY),\\n              size: 25.0,\\n            ),\\n            shape: const CircleBorder(),\\n            elevation: 2.0,\\n            fillColor: Theme.of(context).primaryColor,\\n            padding: const EdgeInsets.all(15.0),\\n          ),\\n          Expanded(\\n            child: TextField(\\n              controller: _textMessageController,\\n              textCapitalization: TextCapitalization.sentences,\\n              onChanged: (String text) {\\n                setState(() {\\n                  _isComposing = text.isNotEmpty;\\n                });\\n              },\\n              decoration: InputDecoration(\\n                border: const OutlineInputBorder(\\n                  borderRadius: BorderRadius.all(\\n                    Radius.circular(10.0),\\n                  ),\\n                ),\\n                hintText: 'Type your message...',\\n                filled: true,\\n                hintStyle: TextStyle(\\n                    color: AppConstants.hexToColor(\\n                        AppConstants.APP_PRIMARY_FONT_COLOR_LIGHT)),\\n              ),\\n            ),\\n          ),\\n          IconButton(\\n            icon: const Icon(Icons.send),\\n            iconSize: 25.0,\\n            color:\\n                AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR_ACTION),\\n            onPressed: _isComposing\\n                ? () => _handleSubmitted(_textMessageController.text)\\n                : null,\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n\\n  void _handleSubmitted(String text) {\\n    _textMessageController.clear();\\n\\n    setState(() {\\n      _isComposing = false;\\n    });\\n    Message message = Message(\\n      senderId: currentAppUser.id,\\n      timestamp: '6:30 PM',\\n      text: text,\\n      isLiked: true,\\n      unread: true,\\n    );\\n    setState(() {\\n      _messages.insert(0, message);\\n    });\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: Text(\\\"Chats\\\")),\\n      body: GestureDetector(\\n        onTap: () => FocusScope.of(context).unfocus(),\\n        child: Column(\\n          children: <Widget>[\\n            Expanded(\\n              child: ListView.builder(\\n                reverse: true,\\n                padding: const EdgeInsets.only(top: 15.0),\\n                itemCount: _messages.length,\\n                itemBuilder: (BuildContext context, int index) {\\n                  final Message message = _messages[index];\\n                  final bool isMe = message.senderId == currentAppUser.id;\\n                  return _buildMessage(message, isMe);\\n                },\\n              ),\\n            ),\\n            _buildMessageComposer(),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\")), mdx(\"p\", null, \"To test update \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main.dart\"), \" and point home to the new \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"chat_screen.dart\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"home: const ChatScreen(),\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://res.cloudinary.com/sitecore/image/upload/c_limit,q_80,w_2000/v1643227480/Codelab/flutter_06_chat_screen_hnbtyp.png\",\n    \"alt\": null\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#-chat-screen","title":"🧑‍🤝‍🧑 Chat Screen"}]},"parent":{"relativePath":"5-chat-screen.mdx"},"frontmatter":{"metaTitle":"Chat Screen page","metaDescription":"Chat Screen description"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Flutter Chat App Codelab"}}},{"node":{"fields":{"slug":"/1-introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/2-project-structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/3-step-up-firebase-for-chat-app","title":"Step up - Firebase for chat app"}}},{"node":{"fields":{"slug":"/4-homescreenandlogin","title":"Home Screen and Login"}}},{"node":{"fields":{"slug":"/5-chat-screen","title":"Chat Screen"}}},{"node":{"fields":{"slug":"/6-attendees-screen","title":"Attendees Screen"}}},{"node":{"fields":{"slug":"/7-firebase-storage-profile","title":"Firebase Storage - Profile"}}},{"node":{"fields":{"slug":"/8-update-chat-screen","title":"Update Chat Screen"}}},{"node":{"fields":{"slug":"/9-1-one-more-thing","title":"One more thing"}}},{"node":{"fields":{"slug":"/9-2-appendix","title":"Appendix"}}}]}},"pageContext":{"id":"4dbc52f4-7f9f-5cdd-b177-e6009d598852"}},
    "staticQueryHashes": ["2375958266","3940619206","417421954"]}