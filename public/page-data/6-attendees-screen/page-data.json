{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/6-attendees-screen",
    "result": {"data":{"site":{"siteMetadata":{"title":"GDG Chat App Codelab | Sumith Damodaran","docsLocation":"https://github.com/sumithpdd/gdg_chat_codelab"}},"mdx":{"fields":{"id":"81e3955f-aeff-5f25-b7af-bab5371f04e0","title":"Attendees Screen","slug":"/6-attendees-screen"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"contentKey\": \"chapter\",\n  \"title\": \"Attendees Screen\",\n  \"stepNo\": 6,\n  \"metaTitle\": \"Attendees Screen page\",\n  \"metaDescription\": \"Attendees Screen description\",\n  \"date\": \"2022-01-25T21:11:31.867Z\",\n  \"duration\": \"30 min\",\n  \"tags\": [\"flutter\", \"firebase\"],\n  \"keywords\": [\"flutter\", \"firebase\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\uD83E\\uDDD1\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1 Attendees Screen\"), mdx(\"p\", null, \"Now we have the chat screen working , user can also login , lets have some attendees and after the user logs in we we will redirect to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attendees_screen\"), \",\\xA0 and attendees can chat among themselves.\"), mdx(\"p\", null, \"First create database_service to call \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"firestore database\"), \" and retrieve users.\"), mdx(\"p\", null, \"Create a new \\uD83D\\uDCC4 file under \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"services\"), \" \\uD83D\\uDCC1 folder  => \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"database_service.dart\"), \" \\uD83D\\uDCC4 file , The attendees are all the users they have registered. We update our database service and create a new function to get all users.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:cloud_firestore/cloud_firestore.dart';\\nimport 'package:devfest_flutter_firebase_chat/helpers/constants.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/app_user.dart';\\n\\nclass DatabaseService {\\n  Future<AppUser> getUser(String userId) async {\\n    DocumentSnapshot userDoc = await usersRef.doc(userId).get();\\n    return AppUser.fromDoc(userDoc);\\n  }\\n\\n  Future<List<AppUser>> searchUsers(String currentUserId, String name) async {\\n    QuerySnapshot usersSnap =\\n        await usersRef.where('name', isGreaterThanOrEqualTo: name).get();\\n    List<AppUser> users = [];\\n    for (var doc in usersSnap.docs) {\\n      AppUser user = AppUser.fromDoc(doc);\\n      if (user.id != currentUserId) {\\n        users.add(user);\\n      }\\n    }\\n    return users;\\n  }\\n\\n  Future<List<AppUser>> getAllUsers(String currentUserId) async {\\n    QuerySnapshot userSnapshot = await usersRef.get();\\n    List<AppUser> users = [];\\n    for (var doc in userSnapshot.docs) {\\n      AppUser user = AppUser.fromDoc(doc);\\n      if (user.id != currentUserId) users.add(user);\\n    }\\n    return users;\\n  }\\n}\\n\")), mdx(\"h3\", null, \"Model to Store Current User data\"), mdx(\"p\", null, \"To store current user data we will create a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"model\"), \" -> \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"user_data.dart\"), \" under \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"models\"), \" \\uD83D\\uDCC1 folder it extends ChangeNotifierProvider -> We need to notify the app when the user changes -> login and logout\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:flutter/material.dart';\\n\\nclass UserData extends ChangeNotifier {\\n  String? currentUserId;\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We will use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"provider\"), \" to maintain state within app. We use to pass data between screens, for that we will use provider package A mixture between dependency injection (DI) and state management, built with widgets for widgets.\")), mdx(\"p\", null, \"update \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"pubspec.yaml\")), \" \\uD83D\\uDCC4 file\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  provider: ^6.0.2\\n\")), mdx(\"p\", null, \"update \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main.dart\"), \" \\uD83D\\uDCC4 file \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main()\"), \" function , import necessary packages\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"runApp(\\n    MultiProvider(\\n      providers: [\\n         ChangeNotifierProvider(\\n          create: (_) => UserData(),\\n        ),\\n        Provider<AuthService>(\\n          create: (_) => AuthService(),\\n        ),\\n        Provider<DatabaseService>(\\n          create: (_) => DatabaseService(),\\n        ),\\n      ],\\n      child: const MyApp(),\\n    ),\\n  );\\n\")), mdx(\"p\", null, \"modify \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"home\"), \" and add \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"routes\"), \" for navigation\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"home: _getScreenId(),\\n      routes: {\\n        LoginScreen.id: (context) => const LoginScreen(),\\n        AttendeesScreen.id: (context) => const AttendeesScreen(),\\n      },\\n\")), mdx(\"p\", null, \"This will give an error, we will create the files in the next steps.\"), mdx(\"p\", null, \"We got all our references now we need to navigate from main to attendees screen if we are logged in. update function \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"_getScreenId()\"), \" in  \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main.dart\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Widget _getScreenId() {\\n    return StreamBuilder<User?>(\\n      stream: FirebaseAuth.instance.authStateChanges(),\\n      builder: (BuildContext context, snapshot) {\\n        if (snapshot.hasData) {\\n          Provider.of<UserData>(context).currentUserId = snapshot.data!.uid;\\n          return const AttendeesScreen();\\n        } else {\\n          return LoginScreen();\\n        }\\n      },\\n    );\\n  }\\n\")), mdx(\"p\", null, \"Create a new \\uD83D\\uDCC4 file under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screens\"), \" \\uD83D\\uDCC1 folder  => \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"attendees_screen.dart ,\"), \" We can see the attendees screen with a list of attendees.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:devfest_flutter_firebase_chat/helpers/app_constants.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/app_user.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/user_data.dart';\\nimport 'package:devfest_flutter_firebase_chat/services/auth_service.dart';\\nimport 'package:devfest_flutter_firebase_chat/services/database_service.dart';\\nimport 'package:provider/provider.dart';\\n\\nimport 'chat_screen.dart';\\n\\nclass AttendeesScreen extends StatefulWidget {\\n  static const String id = 'attendees_screen';\\n\\n  const AttendeesScreen({Key? key}) : super(key: key);\\n\\n  @override\\n  _AttendeesScreenState createState() => _AttendeesScreenState();\\n}\\n\\nclass _AttendeesScreenState extends State<AttendeesScreen> {\\n  List<AppUser> _users = [];\\n  @override\\n  void initState() {\\n    super.initState();\\n    _setupAttendees();\\n  }\\n\\n  _setupAttendees() async {\\n    String currentUserId =\\n        Provider.of<UserData>(context, listen: false).currentUserId!;\\n    List<AppUser> users =\\n        await Provider.of<DatabaseService>(context, listen: false)\\n            .getAllUsers(currentUserId);\\n    if (mounted) {\\n      setState(() {\\n        _users = users;\\n      });\\n    }\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      backgroundColor: Theme.of(context).primaryColor,\\n      appBar: AppBar(\\n        backgroundColor:\\n            AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR),\\n        title: const Text(\\n          'Attendees',\\n          style: TextStyle(\\n            fontSize: 28.0,\\n            fontWeight: FontWeight.bold,\\n          ),\\n        ),\\n        elevation: 0.0,\\n        actions: <Widget>[\\n          IconButton(\\n            icon: const Icon(Icons.exit_to_app),\\n            onPressed: Provider.of<AuthService>(context, listen: false).logout,\\n          ),\\n        ],\\n      ),\\n      body: Column(\\n        children: <Widget>[\\n          AllAttendees(appUsers: _users),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\\nclass AllAttendees extends StatelessWidget {\\n  final List<AppUser> appUsers;\\n\\n  const AllAttendees({required this.appUsers, Key? key}) : super(key: key);\\n  @override\\n  Widget build(BuildContext context) {\\n    String? currentUserId =\\n        Provider.of<UserData>(context, listen: false).currentUserId;\\n\\n    return Expanded(\\n      child: Container(\\n        decoration: BoxDecoration(\\n          color:\\n              AppConstants.hexToColor(AppConstants.APP_BACKGROUND_COLOR_WHITE),\\n        ),\\n        child: Padding(\\n          padding: const EdgeInsets.all(8.0),\\n          child: ListView.builder(\\n            itemCount: appUsers.length,\\n            itemBuilder: (BuildContext context, int index) {\\n              final AppUser user = appUsers[index];\\n              return GestureDetector(\\n                onTap: () => Navigator.push(\\n                  context,\\n                  MaterialPageRoute(\\n                    builder: (_) => ChatScreen(\\n                        // currentUserId: currentUserId!,\\n                        // toUser: user,\\n                        ),\\n                  ),\\n                ),\\n                child: Container(\\n                  margin:\\n                      const EdgeInsets.only(top: 5.0, bottom: 5.0, right: 5.0),\\n                  padding: const EdgeInsets.symmetric(\\n                      horizontal: 10.0, vertical: 10.0),\\n                  decoration: BoxDecoration(\\n                    color: AppConstants.hexToColor(\\n                        AppConstants.APP_PRIMARY_TILE_COLOR),\\n                    borderRadius: const BorderRadius.all(Radius.circular(20.0)),\\n                  ),\\n                  child: Row(\\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\\n                    children: <Widget>[\\n                      Row(\\n                        children: <Widget>[\\n                          const SizedBox(width: 10.0),\\n                          //profileImage(user, avatarRadius: 20),\\n                          Center(\\n                            child: Column(\\n                              crossAxisAlignment: CrossAxisAlignment.center,\\n                              children: <Widget>[\\n                                Text(\\n                                  user.name!,\\n                                  style: TextStyle(\\n                                    color: AppConstants.hexToColor(AppConstants\\n                                        .APP_PRIMARY_FONT_COLOR_WHITE),\\n                                    fontSize: 15.0,\\n                                    fontWeight: FontWeight.bold,\\n                                  ),\\n                                ),\\n                                const SizedBox(height: 5.0),\\n                                Text(\\n                                  user.bio!,\\n                                  style: const TextStyle(\\n                                    fontSize: 12.0,\\n                                  ),\\n                                ),\\n                              ],\\n                            ),\\n                          ),\\n                        ],\\n                      ),\\n                    ],\\n                  ),\\n                ),\\n              );\\n            },\\n          ),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://res.cloudinary.com/sitecore/image/upload/c_limit,q_80,w_2000/v1643232802/Codelab/flutter_06_attendees_screen_h9smua.png\",\n    \"alt\": null\n  })), mdx(\"h3\", null, \"Introduction to widget - separation of concern\"), mdx(\"p\", null, \"Create a \\uD83D\\uDCC1 folder for \\u2018\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"widgets\"), \"\\u2019 => add \\uD83D\\uDCC4 file \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"all_attendees_widget.dart\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:devfest_flutter_firebase_chat/helpers/app_constants.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/app_user.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/user_data.dart';\\nimport 'package:devfest_flutter_firebase_chat/screens/chat_screen.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:provider/provider.dart';\\n\\nclass AllAttendees extends StatelessWidget {\\n  final List<AppUser> appUsers;\\n\\n  const AllAttendees({required this.appUsers, Key? key}) : super(key: key);\\n  @override\\n  Widget build(BuildContext context) {\\n    String? currentUserId =\\n        Provider.of<UserData>(context, listen: false).currentUserId;\\n\\n    return Expanded(\\n      child: Container(\\n        decoration: BoxDecoration(\\n          color:\\n              AppConstants.hexToColor(AppConstants.APP_BACKGROUND_COLOR_WHITE),\\n        ),\\n        child: Padding(\\n          padding: const EdgeInsets.all(8.0),\\n          child: ListView.builder(\\n            itemCount: appUsers.length,\\n            itemBuilder: (BuildContext context, int index) {\\n              final AppUser user = appUsers[index];\\n              return GestureDetector(\\n                onTap: () => Navigator.push(\\n                  context,\\n                  MaterialPageRoute(\\n                    builder: (_) => ChatScreen(\\n                        // currentUserId: currentUserId!,\\n                        // toUser: user,\\n                        ),\\n                  ),\\n                ),\\n                child: Container(\\n                  margin:\\n                      const EdgeInsets.only(top: 5.0, bottom: 5.0, right: 5.0),\\n                  padding: const EdgeInsets.symmetric(\\n                      horizontal: 10.0, vertical: 10.0),\\n                  decoration: BoxDecoration(\\n                    color: AppConstants.hexToColor(\\n                        AppConstants.APP_PRIMARY_TILE_COLOR),\\n                    borderRadius: const BorderRadius.all(Radius.circular(20.0)),\\n                  ),\\n                  child: Row(\\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\\n                    children: <Widget>[\\n                      Row(\\n                        children: <Widget>[\\n                          //   profileImage(user, avatarRadius: 20),\\n                          const SizedBox(width: 10.0),\\n                          Center(\\n                            child: Column(\\n                              crossAxisAlignment: CrossAxisAlignment.center,\\n                              children: <Widget>[\\n                                Text(\\n                                  user.name!,\\n                                  style: TextStyle(\\n                                    color: AppConstants.hexToColor(AppConstants\\n                                        .APP_PRIMARY_FONT_COLOR_WHITE),\\n                                    fontSize: 15.0,\\n                                    fontWeight: FontWeight.bold,\\n                                  ),\\n                                ),\\n                                const SizedBox(height: 5.0),\\n                                Text(\\n                                  user.bio!,\\n                                  style: const TextStyle(\\n                                    fontSize: 12.0,\\n                                  ),\\n                                ),\\n                              ],\\n                            ),\\n                          ),\\n                        ],\\n                      ),\\n                    ],\\n                  ),\\n                ),\\n              );\\n            },\\n          ),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"and update \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"attendees_screen.dart\"), \" to use this widget\"), mdx(\"pre\", {\n    parentName: \"blockquote\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"body: Column(\\n        children: <Widget>[\\n          AllAttendees(appUsers: _users),\\n        ],\\n      ),\\n\"))), mdx(\"h1\", null, \"User profile images\"), mdx(\"p\", null, \"Profile images will come from the network, We will use Flutter library to load and cache network images We are using cached_network_image ,add to pubspec.yaml and get the package..\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cached_network_image: ^3.2.0\"))), mdx(\"p\", null, \"Lets first add a common \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"App drawer\")), mdx(\"p\", null, \"Under \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"widgets\"), \" \\uD83D\\uDCC1 folder create a new \\uD83D\\uDCC4 file \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"app_drawer_widget.dart\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:flutter/material.dart';\\nimport 'package:devfest_flutter_firebase_chat/helpers/app_constants.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/app_user.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/user_data.dart';\\nimport 'package:devfest_flutter_firebase_chat/services/database_service.dart';\\nimport 'package:provider/provider.dart';\\n\\nclass AppDrawer extends StatefulWidget {\\n  const AppDrawer({Key? key}) : super(key: key);\\n\\n  @override\\n  _AppDrawerState createState() => _AppDrawerState();\\n}\\n\\nclass _AppDrawerState extends State<AppDrawer> {\\n  _buildActivity(BuildContext context, String userId) {\\n    return FutureBuilder(\\n        future:\\n            Provider.of<DatabaseService>(context, listen: true).getUser(userId),\\n        builder: (BuildContext context, AsyncSnapshot snapshot) {\\n          if (!snapshot.hasData) {\\n            return const SizedBox.shrink();\\n          }\\n          AppUser user = snapshot.data;\\n          return DrawerHeader(\\n            child: Column(\\n              mainAxisAlignment: MainAxisAlignment.start,\\n              children: <Widget>[\\n                // profileImage(user, avatarRadius: 50),\\n                Text(\\n                  user.name!,\\n                  style: const TextStyle(\\n                    fontSize: 24.0,\\n                    fontWeight: FontWeight.bold,\\n                  ),\\n                ),\\n                Text(\\n                  user.bio!,\\n                  style: const TextStyle(\\n                    fontSize: 20.0,\\n                    fontStyle: FontStyle.italic,\\n                  ),\\n                ),\\n                IconButton(\\n                  icon: const Icon(Icons.edit),\\n                  tooltip: 'Edit Profile',\\n                  onPressed: () {},\\n                  // onPressed: () => Navigator.push(\\n                  //   context,\\n                  //   MaterialPageRoute(\\n                  //     builder: (_) => EditProfileScreen(\\n                  //       user: user,\\n                  //     ),\\n                  //   ),\\n                  // ),\\n                  color:\\n                      AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR),\\n                ),\\n              ],\\n            ),\\n          );\\n        });\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    String? currentUserId = Provider.of<UserData>(context).currentUserId;\\n    return Drawer(\\n      child: Column(children: [\\n        Expanded(\\n          flex: 1,\\n          child: SizedBox(\\n            width: MediaQuery.of(context).size.width * 0.85,\\n            child: currentUserId!.isNotEmpty\\n                ? _buildActivity(context, currentUserId)\\n                : const SizedBox.shrink(),\\n          ),\\n        ),\\n        Expanded(\\n          flex: 2,\\n          child: ListView(children: [\\n            ListTile(\\n              leading: Icon(\\n                Icons.home,\\n                color: AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR),\\n              ),\\n              title: const Text('Home'),\\n              onTap: () {},\\n            ),\\n            const Divider(),\\n            ListTile(\\n              leading: Icon(\\n                Icons.people,\\n                color: AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR),\\n              ),\\n              title: const Text('Attendants'),\\n              onTap: () {},\\n            ),\\n            const Spacer(flex: 8),\\n          ]),\\n        ),\\n      ]),\\n    );\\n  }\\n}\\n\")), mdx(\"p\", null, \"update \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"attendees_screen.dart\"), \" \\uD83D\\uDCC4 file to include the new appdrawer \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"return Scaffold(\\n      drawer: const AppDrawer(),\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://res.cloudinary.com/sitecore/image/upload/c_limit,q_80,w_2000/v1643272478/Codelab/flutter_05_khor4p.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"Lets add functionality to update and Edit the Profile Image\"), mdx(\"p\", null, \"Create a new widget \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"user_profile_image.dart\")), \" file under \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"widgets\"), \" folder\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import 'package:devfest_flutter_firebase_chat/helpers/app_constants.dart';\\nimport 'package:devfest_flutter_firebase_chat/models/app_user.dart';\\nimport 'package:flutter/material.dart';\\n\\nWidget profileImage(AppUser user, {double avatarRadius = 25}) {\\n  // No new profile image\\n  if (user.profileImageUrl!.isEmpty) {\\n    // Display placeholder\\n    return CircleAvatar(\\n      radius: avatarRadius,\\n      backgroundImage: const AssetImage('assets/images/user_placeholder.jpg'),\\n      backgroundColor:\\n          AppConstants.hexToColor(AppConstants.APP_PRIMARY_COLOR_ACTION),\\n    );\\n  } else {\\n    // User profile image exists\\n    return CircleAvatar(\\n      radius: avatarRadius,\\n      backgroundImage: NetworkImage(user.profileImageUrl!),\\n      backgroundColor: Colors.transparent,\\n    );\\n  }\\n}\\n\")), mdx(\"p\", null, \"Place the image before the name in the drawer \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"app_drawer_widget.dart\"), \" ,\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"import\"), \" the file\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" children: <Widget>[\\n                profileImage(user, avatarRadius: 35),\\n                Text(\\n                  user.name!,\\n\")), mdx(\"p\", null, \"Finally we will add a new screen to edit user profile and upload/edit profile image\"), mdx(\"p\", null, \"For that first we need a service to upload image to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"firebase storage\"), \" see next section =>\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#-attendees-screen","title":"🧑‍🤝‍🧑 Attendees Screen","items":[{"items":[{"url":"#model-to-store-current-user-data","title":"Model to Store Current User data"},{"url":"#introduction-to-widget---separation-of-concern","title":"Introduction to widget - separation of concern"}]}]},{"url":"#user-profile-images","title":"User profile images"}]},"parent":{"relativePath":"6-attendees-screen.mdx"},"frontmatter":{"metaTitle":"Attendees Screen page","metaDescription":"Attendees Screen description"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Flutter Chat App Codelab"}}},{"node":{"fields":{"slug":"/1-introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/2-project-structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/3-step-up-firebase-for-chat-app","title":"Step up - Firebase for chat app"}}},{"node":{"fields":{"slug":"/4-homescreenandlogin","title":"Home Screen and Login"}}},{"node":{"fields":{"slug":"/5-chat-screen","title":"Chat Screen"}}},{"node":{"fields":{"slug":"/6-attendees-screen","title":"Attendees Screen"}}},{"node":{"fields":{"slug":"/7-firebase-storage-profile","title":"Firebase Storage - Profile"}}},{"node":{"fields":{"slug":"/8-update-chat-screen","title":"Update Chat Screen"}}},{"node":{"fields":{"slug":"/9-1-one-more-thing","title":"One more thing"}}},{"node":{"fields":{"slug":"/9-2-appendix","title":"Appendix"}}}]}},"pageContext":{"id":"81e3955f-aeff-5f25-b7af-bab5371f04e0"}},
    "staticQueryHashes": ["2375958266","3940619206","417421954"]}